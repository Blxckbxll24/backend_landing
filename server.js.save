import express from 'express';
import cors from 'cors';
import bodyParser from 'body-parser';
import dotenv from 'dotenv';
import { pool } from './db.js';

dotenv.config();
const app = express();
const PORT = process.env.PORT || 3000;

app.use(cors());
app.use(bodyParser.json());

app.post('/api/contact', async (req, res) => {
  const { name, email, phone, message } = req.body;

  if (!name || !email || !phone|| !message) {
    return res.status(400).json({ error: 'Todos los campos son requeridos.' });
  }

  try {
    const query = 'INSERT INTO mensajes (name, email, phone, message) VALUES (?, ?, ?, ?)';
    const [result] = await pool.execute(query, [name, email, phone, message]);
    res.json({ message: 'Mensaje guardado correctamente.' });
  } catch (error) {
    console.error('Error al guardar:', error);
    res.status(500).json({ error: 'Error interno del servidor.' });
  }
});

app.listen(PORT, () => {
  console.log(`Servidor corriendo en http://localhost:${PORT}`);
});
import express from 'express';
import cors from 'cors';
import bodyParser from 'body-parser';
import dotenv from 'dotenv';
import axios from 'axios';
import Joi from 'joi';
import { pool } from './db.js';

dotenv.config();
const app = express();
const PORT = process.env.PORT || 3000;

app.use(cors());
app.use(bodyParser.json());

const contactSchema = Joi.object({
  name: Joi.string().trim().min(3).max(100).required(),
  email: Joi.string().trim().email().required(),
  phone: Joi.string().trim().min(7).max(20).required(),
  message: Joi.string().trim().min(5).max(1000).required(),
  captcha: Joi.string().required()
});

app.get('/', (req, res) => {
  res.send('Servidor funcionando correctamente!');
});

app.get('/api/mensajes', async (req, res) => {
  try {
    const [rows] = await pool.query('SELECT * FROM mensajes');
    res.json(rows);
  } catch (error) {
    console.error('Error al obtener mensajes:', error);
    res.status(500).json({ error: 'Error interno del servidor' });
  }
});

app.post('/api/contact', async (req, res) => {
  const { error, value } = contactSchema.validate(req.body);
  if (error) {
    return res.status(400).json({ error: error.details[0].message });
  }
  const { name, email, phone, message, captcha } = value;
  try {
    const { data } = await axios.post(
      'https://www.google.com/recaptcha/api/siteverify',
      null,
      {
        params: {
          secret: process.env.RECAPTCHA_SECRET_KEY,
          response: captcha,
        },
      }
    );
    if (!data.success) {
      return res.status(400).json({ error: 'Captcha invÃ¡lido. Intenta nuevamente.' });
    }
    const query = 'INSERT INTO mensajes (name, email, phone, message) VALUES (?, ?, ?, ?)';
    await pool.execute(query, [name, email, phone, message]);
    res.json({ message: 'Mensaje guardado correctamente.' });
  } catch (error) {
    console.error('Error:', error);
    res.status(500).json({ error: 'Error interno del servidor.' });
  }
});

app.listen(PORT, () => {
  console.log(`Servidor corriendo en http://localhost:${PORT}`);
});
